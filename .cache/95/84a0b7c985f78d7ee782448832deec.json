{"id":"node_modules/popmotion/easing.js","dependencies":[{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/easing.js.map","includedInParent":true,"mtime":1525955812000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/src/easing.ts","includedInParent":true,"mtime":1513028457000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/package.json","includedInParent":true,"mtime":1611669448384},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/package.json","includedInParent":true,"mtime":1611669448356}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nexports.createReversedEasing = function (easing) {\n    return function (p) { return 1 - easing(1 - p); };\n};\nexports.createMirroredEasing = function (easing) {\n    return function (p) { return (p <= 0.5) ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2; };\n};\nexports.linear = function (p) { return p; };\nexports.createExpoIn = function (power) { return function (p) { return Math.pow(p, power); }; };\nexports.easeIn = exports.createExpoIn(2);\nexports.easeOut = exports.createReversedEasing(exports.easeIn);\nexports.easeInOut = exports.createMirroredEasing(exports.easeIn);\nexports.circIn = function (p) { return 1 - Math.sin(Math.acos(p)); };\nexports.circOut = exports.createReversedEasing(exports.circIn);\nexports.circInOut = exports.createMirroredEasing(exports.circOut);\nexports.createBackIn = function (power) { return function (p) { return (p * p) * ((power + 1) * p - power); }; };\nexports.backIn = exports.createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nexports.backOut = exports.createReversedEasing(exports.backIn);\nexports.backInOut = exports.createMirroredEasing(exports.backIn);\nexports.createAnticipateEasing = function (power) {\n    var backEasing = exports.createBackIn(power);\n    return function (p) { return ((p *= 2) < 1) ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1))); };\n};\nexports.anticipate = exports.createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\nvar NEWTON_ITERATIONS = 8;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar K_SPLINE_TABLE_SIZE = 11;\nvar K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\nvar FLOAT_32_SUPPORTED = (typeof Float32Array !== 'undefined');\nvar a = function (a1, a2) { return 1.0 - 3.0 * a2 + 3.0 * a1; };\nvar b = function (a1, a2) { return 3.0 * a2 - 6.0 * a1; };\nvar c = function (a1) { return 3.0 * a1; };\nvar getSlope = function (t, a1, a2) { return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1); };\nvar calcBezier = function (t, a1, a2) { return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t; };\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\n    var _precomputed = false;\n    var binarySubdivide = function (aX, aA, aB) {\n        var i = 0;\n        var currentX;\n        var currentT;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            }\n            else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    };\n    var newtonRaphsonIterate = function (aX, aGuessT) {\n        var i = 0;\n        var currentSlope = 0;\n        var currentX;\n        for (; i < NEWTON_ITERATIONS; ++i) {\n            currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    };\n    var calcSampleValues = function () {\n        for (var i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {\n            sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\n        }\n    };\n    var getTForX = function (aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = K_SPLINE_TABLE_SIZE - 1;\n        var dist = 0.0;\n        var guessForT = 0.0;\n        var initialSlope = 0.0;\n        for (; currentSample != lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += K_SAMPLE_STEP_SIZE;\n        }\n        --currentSample;\n        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\n        initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\n        }\n    };\n    var precompute = function () {\n        _precomputed = true;\n        if (mX1 != mY1 || mX2 != mY2) {\n            calcSampleValues();\n        }\n    };\n    var resolver = function (aX) {\n        var returnValue;\n        if (!_precomputed) {\n            precompute();\n        }\n        if (mX1 === mY1 && mX2 === mY2) {\n            returnValue = aX;\n        }\n        else if (aX === 0) {\n            returnValue = 0;\n        }\n        else if (aX === 1) {\n            returnValue = 1;\n        }\n        else {\n            returnValue = calcBezier(getTForX(aX), mY1, mY2);\n        }\n        return returnValue;\n    };\n    return resolver;\n}\nexports.cubicBezier = cubicBezier;\n;\n"},"sourceMaps":{"js":{"version":3,"file":"easing.js","sourceRoot":"","sources":["src/easing.ts"],"names":[],"mappings":"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","sourcesContent":["export type Easing = (v: number) => number;\n\nconst DEFAULT_OVERSHOOT_STRENGTH = 1.525;\n\nexport const createReversedEasing = (easing: Easing): Easing =>\n  (p) => 1 - easing(1 - p);\n\nexport const createMirroredEasing = (easing: Easing): Easing =>\n  (p) => (p <= 0.5) ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport const linear: Easing = (p) => p;\n\nexport const createExpoIn = (power: number): Easing => (p) => p ** power;\nexport const easeIn = createExpoIn(2);\nexport const easeOut = createReversedEasing(easeIn);\nexport const easeInOut = createMirroredEasing(easeIn);\n\nexport const circIn: Easing = (p) => 1 - Math.sin(Math.acos(p));\nexport const circOut = createReversedEasing(circIn);\nexport const circInOut = createMirroredEasing(circOut);\n\nexport const createBackIn = (power: number): Easing => (p) => (p * p) * ((power + 1) * p - power);\nexport const backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nexport const backOut = createReversedEasing(backIn);\nexport const backInOut = createMirroredEasing(backIn);\n\nexport const createAnticipateEasing = (power: number): Easing => {\n  const backEasing = createBackIn(power);\n  return (p) => ((p *= 2) < 1) ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n};\n\nexport const anticipate = createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\n\n/*\n  Bezier function generator\n    \n  Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/index.js  \n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  You're a hero\n  \n  Use\n  \n    var easeOut = new Bezier(.17,.67,.83,.67),\n      x = easeOut(0.5); // returns 0.627...\n*/\n\n// Constants\nconst NEWTON_ITERATIONS = 8;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\nconst K_SPLINE_TABLE_SIZE = 11;\nconst K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\nconst FLOAT_32_SUPPORTED = (typeof Float32Array !== 'undefined');\n\n// Helper methods\nconst a = (a1: number, a2: number) => 1.0 - 3.0 * a2 + 3.0 * a1;\nconst b = (a1: number, a2: number) => 3.0 * a2 - 6.0 * a1;\nconst c = (a1: number) => 3.0 * a1;\n\nconst getSlope = (t: number, a1: number, a2: number) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n\nconst calcBezier = (t: number, a1: number, a2: number) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n\n/*\n  Create a cubic bezier resolver\n*/\nexport function cubicBezier(mX1: number, mY1: number, mX2: number, mY2: number) {\n  const sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\n  let _precomputed = false;\n\n  const binarySubdivide = (aX: number, aA: number, aB: number) => {\n    let i = 0;\n    let currentX;\n    let currentT;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  };\n\n  const newtonRaphsonIterate = (aX: number, aGuessT: number) => {\n    let i = 0;\n    let currentSlope = 0;\n    let currentX;\n\n    for (; i < NEWTON_ITERATIONS; ++i) {\n      currentSlope = getSlope(aGuessT, mX1, mX2);\n      \n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      \n      currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    \n    return aGuessT;\n  };\n\n  const calcSampleValues = () => {\n    for (let i = 0; i < K_SPLINE_TABLE_SIZE; ++i) {\n      sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\n    }\n  };\n\n  const getTForX = (aX: number) => {\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    let lastSample = K_SPLINE_TABLE_SIZE - 1;\n    let dist = 0.0;\n    let guessForT = 0.0;\n    let initialSlope = 0.0;\n      \n    for (; currentSample != lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += K_SAMPLE_STEP_SIZE;\n    }\n    \n    --currentSample;\n    \n    dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample+1] - sampleValues[currentSample]);\n    guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\n    \n    initialSlope = getSlope(guessForT, mX1, mX2);\n    \n    // If slope is greater than min\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT);\n    // Slope is equal to min\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    // Slope is less than min\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\n    }\n  };\n\n  const precompute = () => {\n    _precomputed = true;\n    if (mX1 != mY1 || mX2 != mY2) {\n      calcSampleValues();\n    }\n  };\n\n  const resolver = (aX: number) => {\n    let returnValue;\n\n    if (!_precomputed) {\n      precompute();\n    }\n\n    // If linear gradient, return X as T\n    if (mX1 === mY1 && mX2 === mY2) {\n      returnValue = aX;\n\n    // If at start, return 0\n    } else if (aX === 0) {\n      returnValue = 0;\n\n    // If at end, return 1\n    } else if (aX === 1) {\n      returnValue = 1;\n\n    } else {\n      returnValue = calcBezier(getTForX(aX), mY1, mY2);\n    }\n\n    return returnValue;\n  };\n\n  return resolver;\n};"]}},"error":null,"hash":"5c65a47ca7d60caf071c2993b86405a9","cacheData":{"env":{}}}