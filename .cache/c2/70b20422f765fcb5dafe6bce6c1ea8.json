{"id":"node_modules/popmotion/compositors/merge.js","dependencies":[{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/compositors/merge.js.map","includedInParent":true,"mtime":1525955813000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/src/compositors/merge.ts","includedInParent":true,"mtime":1513028457000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/package.json","includedInParent":true,"mtime":1611669448384},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/package.json","includedInParent":true,"mtime":1611669448356},{"name":"../action","loc":{"line":3,"column":23},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/compositors/merge.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/action/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar action_1 = require(\"../action\");\nvar merge = function () {\n    var actions = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        actions[_i] = arguments[_i];\n    }\n    return action_1.default(function (observer) {\n        var subs = actions.map(function (thisAction) { return thisAction.start(observer); });\n        return {\n            stop: function () { return subs.forEach(function (sub) { return sub.stop(); }); }\n        };\n    });\n};\nexports.default = merge;\n"},"sourceMaps":{"js":{"version":3,"file":"merge.js","sourceRoot":"","sources":["../src/compositors/merge.ts"],"names":[],"mappings":";;AAAA,oCAA2C;AAE3C,IAAM,KAAK,GAAG;IAAC,iBAAoB;SAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;QAApB,4BAAoB;;IAAK,OAAA,gBAAM,CAAC,UAAC,QAAQ;QACtD,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAA1B,CAA0B,CAAC,CAAC;QACrE,MAAM,CAAC;YACL,IAAI,EAAE,cAAM,OAAA,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,EAAjC,CAAiC;SAC9C,CAAC;IACJ,CAAC,CAAC;AALsC,CAKtC,CAAC;AAEH,kBAAe,KAAK,CAAC","sourcesContent":["import action, { Action } from '../action';\n\nconst merge = (...actions: Action[]) => action((observer) => {\n  const subs = actions.map((thisAction) => thisAction.start(observer));\n  return {\n    stop: () => subs.forEach((sub) => sub.stop())\n  };\n});\n\nexport default merge;\n"]}},"error":null,"hash":"84ac210662d27f2a4185633f05fca36d","cacheData":{"env":{}}}