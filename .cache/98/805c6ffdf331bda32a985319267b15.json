{"id":"node_modules/popmotion/input/multitouch/index.js","dependencies":[{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/multitouch/index.js.map","includedInParent":true,"mtime":1525955813000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/src/input/multitouch/index.ts","includedInParent":true,"mtime":1513028457000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/package.json","includedInParent":true,"mtime":1611669448384},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/package.json","includedInParent":true,"mtime":1611669448356},{"name":"framesync","loc":{"line":3,"column":26},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/multitouch/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/framesync/dist/framesync.es.js"},{"name":"../../action","loc":{"line":4,"column":23},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/multitouch/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/action/index.js"},{"name":"../../calc","loc":{"line":5,"column":21},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/multitouch/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/calc.js"},{"name":"../listen","loc":{"line":6,"column":23},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/multitouch/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/listen/index.js"},{"name":"../pointer/utils","loc":{"line":7,"column":22},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/multitouch/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/input/pointer/utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar action_1 = require(\"../../action\");\nvar calc_1 = require(\"../../calc\");\nvar listen_1 = require(\"../listen\");\nvar utils_1 = require(\"../pointer/utils\");\nvar points = [utils_1.defaultPointerPos()];\nvar isTouchDevice = false;\nif (typeof document !== 'undefined') {\n    var updatePointsLocation = function (_a) {\n        var touches = _a.touches;\n        isTouchDevice = true;\n        var numTouches = touches.length;\n        points.length = 0;\n        for (var i = 0; i < numTouches; i++) {\n            var thisTouch = touches[i];\n            points.push(utils_1.eventToPoint(thisTouch));\n        }\n    };\n    listen_1.default(document, 'touchstart touchmove', true)\n        .start(updatePointsLocation);\n}\nvar multitouch = function (_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.preventDefault, preventDefault = _c === void 0 ? true : _c, _d = _b.scale, scale = _d === void 0 ? 1.0 : _d, _e = _b.rotate, rotate = _e === void 0 ? 0.0 : _e;\n    return action_1.default(function (_a) {\n        var update = _a.update;\n        var output = {\n            touches: points,\n            scale: scale,\n            rotate: rotate\n        };\n        var initialDistance = 0.0;\n        var initialRotation = 0.0;\n        var isGesture = points.length > 1;\n        if (isGesture) {\n            var firstTouch = points[0], secondTouch = points[1];\n            initialDistance = calc_1.distance(firstTouch, secondTouch);\n            initialRotation = calc_1.angle(firstTouch, secondTouch);\n        }\n        var updatePoint = function () {\n            if (isGesture) {\n                var firstTouch = points[0], secondTouch = points[1];\n                var newDistance = calc_1.distance(firstTouch, secondTouch);\n                var newRotation = calc_1.angle(firstTouch, secondTouch);\n                output.scale = scale * (newDistance / initialDistance);\n                output.rotate = rotate + (newRotation - initialRotation);\n            }\n            update(output);\n        };\n        var onMove = function (e) {\n            if (preventDefault || e.touches.length > 1)\n                e.preventDefault();\n            framesync_1.onFrameUpdate(updatePoint);\n        };\n        var updateOnMove = listen_1.default(document, 'touchmove', { passive: !preventDefault })\n            .start(onMove);\n        if (isTouchDevice)\n            framesync_1.onFrameUpdate(updatePoint);\n        return {\n            stop: function () {\n                framesync_1.cancelOnFrameUpdate(updatePoint);\n                updateOnMove.stop();\n            }\n        };\n    });\n};\nexports.default = multitouch;\nexports.getIsTouchDevice = function () { return isTouchDevice; };\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/input/multitouch/index.ts"],"names":[],"mappings":";;AAAA,uCAA+D;AAC/D,uCAA8C;AAC9C,mCAA6C;AAC7C,oCAA+B;AAE/B,0CAAmE;AAEnE,IAAM,MAAM,GAAmB,CAAC,yBAAiB,EAAE,CAAC,CAAC;AACrD,IAAI,aAAa,GAAG,KAAK,CAAC;AAE1B,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;IACpC,IAAM,oBAAoB,GAAG,UAAC,EAAuB;YAArB,oBAAO;QACrC,aAAa,GAAG,IAAI,CAAC;QACrB,IAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC;QAGlC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAElB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,IAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,oBAAY,CAAC,SAAS,CAAC,CAAC,CAAC;QACvC,CAAC;IACH,CAAC,CAAC;IAEF,gBAAM,CAAC,QAAQ,EAAE,sBAAsB,EAAE,IAAI,CAAC;SAC3C,KAAK,CAAC,oBAAoB,CAAC,CAAC;AACjC,CAAC;AAED,IAAM,UAAU,GAAG,UAAC,EAAuE;QAAvE,4BAAuE,EAArE,sBAAqB,EAArB,0CAAqB,EAAE,aAAW,EAAX,gCAAW,EAAE,cAAY,EAAZ,iCAAY;IAAkC,OAAA,gBAAM,CAAC,UAAC,EAAU;YAAR,kBAAM;QACtH,IAAM,MAAM,GAAG;YACb,OAAO,EAAE,MAAM;YACf,KAAK,OAAA;YACL,MAAM,QAAA;SACP,CAAC;QAEF,IAAI,eAAe,GAAG,GAAG,CAAC;QAC1B,IAAI,eAAe,GAAG,GAAG,CAAC;QAE1B,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACN,IAAA,sBAAU,EAAE,uBAAW,CAAY;YAC3C,eAAe,GAAG,eAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YACpD,eAAe,GAAG,YAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACnD,CAAC;QAED,IAAM,WAAW,GAAG;YAClB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACN,IAAA,sBAAU,EAAE,uBAAW,CAAY;gBAC3C,IAAM,WAAW,GAAG,eAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBACtD,IAAM,WAAW,GAAG,YAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBAEnD,MAAM,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,WAAW,GAAG,eAAe,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,WAAW,GAAG,eAAe,CAAC,CAAC;YAC3D,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,CAAC;QACjB,CAAC,CAAC;QAEF,IAAM,MAAM,GAAG,UAAC,CAAa;YAC3B,EAAE,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBAAC,CAAC,CAAC,cAAc,EAAE,CAAC;YAC/D,yBAAa,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC,CAAC;QAEF,IAAM,YAAY,GAAG,gBAAM,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,cAAc,EAAE,CAAC;aAC7E,KAAK,CAAC,MAAM,CAAC,CAAC;QAEjB,EAAE,CAAC,CAAC,aAAa,CAAC;YAAC,yBAAa,CAAC,WAAW,CAAC,CAAC;QAE9C,MAAM,CAAC;YACL,IAAI,EAAE;gBACJ,+BAAmB,CAAC,WAAW,CAAC,CAAC;gBACjC,YAAY,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC;SACF,CAAC;IACJ,CAAC,CAAC;AA/CsG,CA+CtG,CAAC;AAEH,kBAAe,UAAU,CAAC;AACb,QAAA,gBAAgB,GAAG,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC","sourcesContent":["import { cancelOnFrameUpdate, onFrameUpdate } from 'framesync';\nimport action, { Action } from '../../action';\nimport { angle, distance } from '../../calc';\nimport listen from '../listen';\nimport { PointerPoint, PointerProps } from '../pointer/types';\nimport { defaultPointerPos, eventToPoint } from '../pointer/utils';\n\nconst points: PointerPoint[] = [defaultPointerPos()];\nlet isTouchDevice = false;\n\nif (typeof document !== 'undefined') {\n  const updatePointsLocation = ({ touches }: TouchEvent) => {\n    isTouchDevice = true;\n    const numTouches = touches.length;\n\n    // TODO: Optimisation would be to provide existing points to `eventToPoint`\n    points.length = 0;\n\n    for (let i = 0; i < numTouches; i++) {\n      const thisTouch = touches[i];\n      points.push(eventToPoint(thisTouch));\n    }\n  };\n\n  listen(document, 'touchstart touchmove', true)\n    .start(updatePointsLocation);\n}\n\nconst multitouch = ({ preventDefault = true, scale = 1.0, rotate = 0.0 }: PointerProps = {}): Action => action(({ update }) => {\n  const output = {\n    touches: points,\n    scale,\n    rotate\n  };\n\n  let initialDistance = 0.0;\n  let initialRotation = 0.0;\n\n  const isGesture = points.length > 1;\n\n  if (isGesture) {\n    const [ firstTouch, secondTouch ] = points;\n    initialDistance = distance(firstTouch, secondTouch);\n    initialRotation = angle(firstTouch, secondTouch);\n  }\n\n  const updatePoint = () => {\n    if (isGesture) {\n      const [ firstTouch, secondTouch ] = points;\n      const newDistance = distance(firstTouch, secondTouch);\n      const newRotation = angle(firstTouch, secondTouch);\n\n      output.scale = scale * (newDistance / initialDistance);\n      output.rotate = rotate + (newRotation - initialRotation);\n    }\n\n    update(output);\n  };\n\n  const onMove = (e: TouchEvent) => {\n    if (preventDefault || e.touches.length > 1) e.preventDefault();\n    onFrameUpdate(updatePoint);\n  };\n\n  const updateOnMove = listen(document, 'touchmove', { passive: !preventDefault })\n    .start(onMove);\n\n  if (isTouchDevice) onFrameUpdate(updatePoint);\n\n  return {\n    stop: () => {\n      cancelOnFrameUpdate(updatePoint);\n      updateOnMove.stop();\n    }\n  };\n});\n\nexport default multitouch;\nexport const getIsTouchDevice = () => isTouchDevice;\n"]}},"error":null,"hash":"2f1cfdb28f8f927d7ce9ea4b9afe3154","cacheData":{"env":{}}}