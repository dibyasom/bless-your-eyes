{"id":"node_modules/popmotion/animations/physics/index.js","dependencies":[{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js.map","includedInParent":true,"mtime":1525955813000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/src/animations/physics/index.ts","includedInParent":true,"mtime":1515143764000},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/package.json","includedInParent":true,"mtime":1611669448384},{"name":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/package.json","includedInParent":true,"mtime":1611669448356},{"name":"framesync","loc":{"line":3,"column":26},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/framesync/dist/framesync.es.js"},{"name":"style-value-types","loc":{"line":4,"column":34},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/style-value-types/dist/style-value-types.es.js"},{"name":"../../action","loc":{"line":5,"column":23},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/action/index.js"},{"name":"../../action/vector","loc":{"line":6,"column":23},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/action/vector.js"},{"name":"../../calc","loc":{"line":7,"column":21},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/calc.js"},{"name":"../every-frame","loc":{"line":8,"column":28},"parent":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/physics/index.js","resolved":"/home/divyu/Documents/GitHub/bless-your-eyes/node_modules/popmotion/animations/every-frame/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar framesync_1 = require(\"framesync\");\nvar style_value_types_1 = require(\"style-value-types\");\nvar action_1 = require(\"../../action\");\nvar vector_1 = require(\"../../action/vector\");\nvar calc_1 = require(\"../../calc\");\nvar every_frame_1 = require(\"../every-frame\");\nvar physics = function (props) {\n    if (props === void 0) { props = {}; }\n    return action_1.default(function (_a) {\n        var complete = _a.complete, update = _a.update;\n        var _b = props.acceleration, acceleration = _b === void 0 ? 0 : _b, _c = props.friction, friction = _c === void 0 ? 0 : _c, _d = props.velocity, velocity = _d === void 0 ? 0 : _d, springStrength = props.springStrength, to = props.to;\n        var _e = props.restSpeed, restSpeed = _e === void 0 ? 0.001 : _e, _f = props.from, from = _f === void 0 ? 0 : _f;\n        var current = from;\n        var timer = every_frame_1.default().start(function () {\n            var elapsed = Math.max(framesync_1.timeSinceLastFrame(), 16);\n            if (acceleration)\n                velocity += calc_1.speedPerFrame(acceleration, elapsed);\n            if (friction)\n                velocity *= Math.pow((1 - friction), (elapsed / 100));\n            if (springStrength !== undefined && to !== undefined) {\n                var distanceToTarget = to - current;\n                velocity += distanceToTarget * calc_1.speedPerFrame(springStrength, elapsed);\n            }\n            current += calc_1.speedPerFrame(velocity, elapsed);\n            update(current);\n            var isComplete = (restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed));\n            if (isComplete) {\n                timer.stop();\n                complete();\n            }\n        });\n        return {\n            set: function (v) {\n                current = v;\n                return this;\n            },\n            setAcceleration: function (v) {\n                acceleration = v;\n                return this;\n            },\n            setFriction: function (v) {\n                friction = v;\n                return this;\n            },\n            setSpringStrength: function (v) {\n                springStrength = v;\n                return this;\n            },\n            setSpringTarget: function (v) {\n                to = v;\n                return this;\n            },\n            setVelocity: function (v) {\n                velocity = v;\n                return this;\n            },\n            stop: function () { return timer.stop(); }\n        };\n    });\n};\nexports.default = vector_1.default(physics, {\n    acceleration: style_value_types_1.number.test,\n    friction: style_value_types_1.number.test,\n    velocity: style_value_types_1.number.test,\n    from: style_value_types_1.number.test,\n    to: style_value_types_1.number.test,\n    springStrength: style_value_types_1.number.test\n});\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/animations/physics/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { timeSinceLastFrame } from 'framesync';\nimport { number } from 'style-value-types';\nimport action from '../../action';\nimport { Action } from '../../action';\nimport vectorAction from '../../action/vector';\nimport { speedPerFrame } from '../../calc';\nimport onFrame from '../every-frame';\nimport { PhysicsInterface, Props } from './types';\n\nconst physics = (props: Props = {}): Action => action(({ complete, update }): PhysicsInterface => {\n  let {\n    acceleration = 0,\n    friction = 0,\n    velocity = 0,\n    springStrength,\n    to\n  } = props;\n  const {\n    restSpeed = 0.001,\n    from = 0\n  } = props;\n  let current = from;\n\n  const timer = onFrame().start(() => {\n    // Integration doesn't work well with very low numbers\n    const elapsed = Math.max(timeSinceLastFrame(), 16);\n\n    if (acceleration) velocity += speedPerFrame(acceleration, elapsed);\n    if (friction) velocity *= (1 - friction) ** (elapsed / 100);\n\n    if (springStrength !== undefined && to !== undefined) {\n      const distanceToTarget = to - current;\n      velocity += distanceToTarget * speedPerFrame(springStrength, elapsed);\n    }\n\n    current += speedPerFrame(velocity, elapsed);\n\n    update(current);\n\n    const isComplete = (restSpeed !== false && (!velocity || Math.abs(velocity) <= restSpeed));\n\n    if (isComplete) {\n      timer.stop();\n      complete();\n    }\n  });\n\n  return {\n    set(v) {\n      current = v;\n      return this;\n    },\n    setAcceleration(v) {\n      acceleration = v;\n      return this;\n    },\n    setFriction(v) {\n      friction = v;\n      return this;\n    },\n    setSpringStrength(v) {\n      springStrength = v;\n      return this;\n    },\n    setSpringTarget(v) {\n      to = v;\n      return this;\n    },\n    setVelocity(v) {\n      velocity = v;\n      return this;\n    },\n    stop: () => timer.stop()\n  };\n});\n\nexport default vectorAction(physics, {\n  acceleration: number.test,\n  friction: number.test,\n  velocity: number.test,\n  from: number.test,\n  to: number.test,\n  springStrength: number.test\n});\n"]}},"error":null,"hash":"c718c1228dfad81173ed78d668d0b26a","cacheData":{"env":{}}}